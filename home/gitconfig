[merge]
  # opendiff is part of XCode for osx
  tool = opendiff
[core]
  # default ignored files for OSX; see below
  excludesfile = /Users/darrencheng/.gitignore
  editor = /Applications/MacVim.app/Contents/MacOS/Vim
[alias]
  # git fetch shortcut
  f = fetch
  # git status shortcut
  st = status
  # git checkout shortcut
  co = checkout
  # git rebase shortcut
  rb = rebase
  # git cherry-pick shortcut
  cp = cherry-pick
  # git commit shortcut
  cm = commit
  # git branch shortcut
  br = branch
  # given a username or an email address shows the name and email address of the author
  whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
  # given a commit name shows its hash and short log (i.e. git whatis someBranchName)
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
  # list all aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'
  # sexier looking shortlog; git lg FROM..TO
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  count = shortlog -s -n -e
  # short version of cherry-pick
  pick = cherry-pick
  # show an ASCII version of the commit tree
  tree = log --graph --decorate --oneline --remotes=origin --remotes=fork --glob=refs/heads HEAD
  tr = log --graph --decorate --oneline --remotes=origin --remotes=fork --glob=refs/heads HEAD
  treeall = log --graph --decorate --oneline --all
  tra = log --graph --decorate --oneline --all
  treesingle = log --graph --decorate --oneline
  trs = log --graph --decorate --oneline
  # The wip allows for a quick way to add all new and modified files to the index, while cleaning the index from the files removed from the working tree.
  wip = !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m \"wip\""
  # The unwip will restore the deleted files to the working tree!
  unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"
  # inspect difference in last commit
  last = diff HEAD^..HEAD
  la = !"git last"
  # git commit --amend shortcut
  amend = commit --amend
  # returns the current branch name
  me = rev-parse --abbrev-ref HEAD
  # pushes current branch to the specified remote, defaults to fork
  pushme = !sh -c 'git me | xargs git push ${1:-fork} -f' -
  pm = !"git pushme"
  # pushes current branch to origin/master
  masterme = !sh -c 'git me | xargs git push origin $1:master' -
  mm = !"git masterme"
  # delete specified branch from the specified remote
  delete = !sh -c 'git push $1 :$2' -
  # delete current branch from the specified remote, defaults to fork
  killme = !sh -c 'git me | xargs git delete ${1:-fork}' -
  km = !"git killme"
  # updates fork/master to origin/master
  upfork = push fork origin/master:master --force
  # updates origin/master and syncs fork master to origin
  sync = !"git fetch origin; git upfork"
  s = !"git sync"
  # stashes all changes and creates a fixup commit
  fixup = !"git add -A; git commit -m 'fixup'"
  fu = !"git fixup"
  # number of lines
  impact = !"ruby ~/bin/gitimpact.rb"
  # remote details
  remote-details = !"git remote -v | grep 'fork' | awk '{print $2}' | uniq | sed 's#.*:##g' | sed 's#.git$##g'"
  # browse the branch
  showme = !hub browse `git remote-details` tree/`git rev-parse --abbrev-ref HEAD`
  # pull request
  pullme = !hub browse `git remote-details` pull/new/`git me`
  # pushes to origin/master
  publish = push origin HEAD:master
  # browse the current head on github
  bro = !"hub browse -- commit/`git rev-parse HEAD`"
  # better blame
  changes = !"git log --follow -p "
[color]
  ui = auto
