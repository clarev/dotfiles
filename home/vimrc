""" Default VIM configuration """

" load pathogen
call pathogen#infect()
call pathogen#helptags()

""" Set Missing Filetypes """

au BufRead,BufNewFile gitconfig set filetype=gitconfig

" Basic VIM settings

" use VIM settings, not vi settings
set nocompatible
" enable syntax highlighting
syntax on
set tabstop=2
set shiftwidth=2
" insert spaces instead of tabs
set expandtab
" show line numbers
set number
" disable error bell
set visualbell
" share vim clipboard with system
set clipboard=unnamed
" use auto-indentation
filetype plugin indent on
" set leader to ,
let mapleader = ","
" set minimum number of lines above and below cursor
set scrolloff=5
" turn on incremental searching
set incsearch
" speed up mappings
set ttimeout
set ttimeoutlen=50
" round >> shifting
set shiftround
" display tabs and trailing spaces visually
set list listchars=tab:ˍˍ,trail:ˍ
au FileType gitcommit set nolist
" toggle visible whitespace
nnoremap <silent> <leader>6 :set list!<cr>
" turn off .swp files
set noswapfile
set nobackup
set nowb
"" persistent file undo
if !isdirectory($HOME . "/.vim/backups")
  call mkdir($HOME . "/.vim/backups", "p")
endif
set undodir=$HOME/.vim/backups
set undofile
" smoother screen redraw
set ttyfast
" set background defaults
set background=dark
set transparency=3
" highlight search matches
set hlsearch
" disable syntax highlighting past specified column for long lines
set synmaxcol=160
" hide all scrollbars in gui vim
set guioptions-=r
set guioptions-=l
set guioptions-=R
set guioptions-=L
" always show status line
set laststatus=2
" hide duplicate mode descriptions
set noshowmode
" set font
set guifont=Menlo\ for\ Powerline:h14
" disable Ex-only mapping
nnoremap Q <nop>
" disable man page lookup
nnoremap K <nop>
" enable mouse usage
set mouse=a


""" Auto Commands """

" trim all whitespace on save
autocmd BufWritePre * call TrimWhitespace()
function TrimWhitespace()
  let line = line('.')
  let col = col('.')
  execute('%s/\s\+$//e')
  call cursor(line, col)
endfunction
" always display sign column
autocmd BufEnter * sign define dummy
autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')
" automatically redraw screen after save
autocmd BufWritePost * :redraw!
" Automatically close QuickFix window
aug QFClose
  au!
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
aug END


""" Mappings """

" Open base directory in netrw
nnoremap <silent> <leader>- :e `pwd`<cr>zz
" Clear search highlights
nnoremap <silent> ;k :noh<cr>
" Reindent current file and return to previous location
nnoremap <leader>I mzgg=G`z<CR>
" Save file as root
noremap <leader>W :w !sudo tee % > /dev/null<cr>
" Delete the next search match
nnoremap <silent> mn :execute "normal! hnd" . strlen(@/) . "l"<cr>
" Quick replace global
nnoremap <leader>C :%s//
" Quick replace after cursor
nnoremap <leader>c :.,$s//
" Break long string before 80
nnoremap <leader>b 77<Bar>i''<Esc>i<Return><Esc>kA\<Esc>j
" Delete from beggining of current line to end of last
nnoremap <silent> B ^d0i<BS>
" Redraw screen mapping
nnoremap <silent> <leader>D :redraw!<cr>
" Visually select all
nnoremap <leader>a ggVG

""" Leader WASD Mappings """

" Move line up
nnoremap <leader>w ddkP
" Move line down
nnoremap <leader>s ddp

" Automatically adjust quickfix window height
"   https://gist.github.com/juanpabloaj/5845848
au FileType qf call AdjustWindowHeight(3, 18)
function! AdjustWindowHeight(minheight, maxheight)
  let l = 1
  let n_lines = 0
  let w_width = winwidth(0)
  while l <= line('$')
    " number to float for division
    let l_len = strlen(getline(l)) + 0.0
    let line_width = l_len/w_width
    let n_lines += float2nr(ceil(line_width))
    let l += 1
  endw
  exe max([min([n_lines, a:maxheight]), a:minheight]) . "wincmd _"
endfunction

" Delete Inactive Buffers
function! CloseInactiveBuffers()
  let tablist = []
  for i in range(tabpagenr('$'))
    call extend(tablist, tabpagebuflist(i + 1))
  endfor
  for i in range(1, bufnr('$'))
    if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
      silent exec 'bwipeout' i
    endif
  endfor
  echomsg 'Closed inactive buffers.'
endfunction
nnoremap <leader>q :call CloseInactiveBuffers()<cr>

" Window Control Mappings

" open and switch to window right
nnoremap <silent> ''d :rightbelow wincmd v<cr>
" open and switch to window left
nnoremap <silent> ''a :leftabove wincmd v<cr>
" open and switch to window above
nnoremap <silent> ''w :leftabove wincmd s<cr>
" open window below
nnoremap <silent> ''s :rightbelow wincmd s<cr>

" move to window on the right
nnoremap <silent> ;d :wincmd l<cr>
" move to window on the left
nnoremap <silent> ;a :wincmd h<cr>
" move to window above
nnoremap <silent> ;w :wincmd k<cr>
" move to window below
nnoremap <silent> ;s :wincmd j<cr>

" move to window by number
let i = 1
while i <= 9
  execute 'nnoremap <silent> ;' . i . ' :' . i . 'wincmd w<CR>'
  let i = i + 1
endwhile

" rotate split windows
nnoremap <silent> ;r :wincmd r<cr>

" Tab Control Mappings

" open current window in a new tab
nnoremap <silent> ''t :tab split<cr>
" move to next tab
nnoremap <silent> ;e :tabn<cr>
" move to previous tab
nnoremap <silent> ;q :tabp<cr>

" Launch TextMate
function LaunchTextmate()
  silent !mate %:p
  redraw!
endfunction
command! Mate call LaunchTextmate()

" Reindent File
nnoremap <silent> <leader>= :call Reindent()<CR>
function Reindent()
  let line = line('.')
  let col = col('.')
  execute "normal! ggVG="
  call cursor(line, col)
endfunction
