#!/bin/bash

#
# Returns the path of the most recent ancestor branch on origin. Optionally
# excludes an input regex.
#
# Matching with origin/master branch is weighted the most. Otherwise, matching
# is done in lexicographically.
#

# only exclude input regex from matches
exclusion="$1"
if [ -z "$exclusion" ]; then
  exclusion="*"
fi

# backtrack at most 500 commits looking for the most recent ancestor branch
# on origin
index=1
while [ $index -lt 500 ]; do
  ticks="$(printf '^%.0s' $(seq 1 $index))"

  # use origin/master as ancestor with highest priority
  if [ "$(git branch --remote --contains HEAD$ticks | grep 'origin/master')" ]; then
    path="origin/master"
  fi

  if [ -z "$path" ]; then
    # determine if the current ancestor commit belongs to a qualified
    # remote branch
    #   * search remote branches containing the current ancestor commit
    #   * potentially exclude input regex from matches
    #   * filter by commits on origin
    #   * filter out origin/HEAD branch
    #   * select the first match
    path="$(
      git branch --remote --contains HEAD$ticks |
      grep -v "$exclusion" |
      grep origin |
      sed /HEAD/d |
      head -n 1 |
      sed 's/[ ]*//'
    )"
  fi

  # break out of the loop if any matches are found
  if [ "$path" ]; then
    break
  fi

  # iterate back one commit
  let index+=1
done

# return the description (remote/branch) of the most recent ancestor on origin
echo $path
